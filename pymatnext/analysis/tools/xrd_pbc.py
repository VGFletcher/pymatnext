import numpy as np
ASF_c = np.asarray([
    0.0, 
    0.001305, 
    0.0064, 
    0.0377, 
    0.0385, 
    -0.1932, 
    0.2156, 
    -11.529, 
    0.2508, 
    0.2776, 
    0.3515, 
    0.676, 
    0.8584, 
    1.1151, 
    1.1407, 
    1.1149, 
    0.8669, 
    -9.5574, 
    1.4445, 
    1.4228, 
    1.3751, 
    1.3329, 
    1.2807, 
    1.2199, 
    1.1832, 
    1.0896, 
    1.0369, 
    1.0118, 
    1.0341, 
    1.191, 
    1.3041, 
    1.7189, 
    2.1313, 
    2.531, 
    2.8409, 
    2.9557, 
    2.825, 
    3.4873, 
    2.5064, 
    1.91213, 
    2.06929, 
    3.75591, 
    4.3875, 
    5.40428, 
    5.37814, 
    5.328, 
    5.26593, 
    5.179, 
    5.0694, 
    4.9391, 
    4.7821, 
    4.5909, 
    4.352, 
    4.0712, 
    3.7118, 
    3.3352, 
    2.7731, 
    2.14678, 
    1.86264, 
    2.0583, 
    1.98486, 
    2.02876, 
    2.20963, 
    2.5745, 
    2.4196, 
    3.58324, 
    4.29728, 
    4.56796, 
    5.92046, 
    1.63929, 
    7.56672, 
    7.97628, 
    8.58154, 
    9.24354, 
    9.8875, 
    10.472, 
    11.0005, 
    11.4722, 
    11.6883, 
    12.0658, 
    12.6089, 
    13.1746, 
    13.4118, 
    13.5782, 
    13.677, 
    13.7108, 
    13.6905, 
    13.7247, 
    13.6211, 
    13.5266, 
    13.4314, 
    13.4287, 
    13.3966, 
    13.3573, 
    13.3812, 
    13.3592, 
    13.2887, 
    13.2754, 
    13.2674, 
    1.0, 
    1.0, 
    1.0, 
    1.0, 
    1.0, 
    1.0, 
    1.0, 
    1.0, 
    1.0, 
    1.0, 
    1.0, 
    1.0, 
    1.0, 
    1.0, 
    1.0, 
    1.0, 
    1.0, 
    1.0, 
    1.0, 
    1.0 ])

ASF_a = np.asarray([
[    0.0, 0.0, 0.0, 0.0],
[    0.489918, 0.262003, 0.196767, 0.049879],
[    0.8734, 0.6309, 0.3112, 0.178],
[    1.1282, 0.7508, 0.6175, 0.4653],
[    1.5919, 1.1278, 0.5391, 0.7029],
[    2.0545, 1.3326, 1.0979, 0.7068],
[    2.31, 1.02, 1.5886, 0.865],
[    12.2126, 3.1322, 2.0125, 1.1663],
[    3.0485, 2.2868, 1.5463, 0.867],
[    3.5392, 2.6412, 1.517, 1.0243],
[    3.9553, 3.1125, 1.4546, 1.1251],
[    4.7626, 3.1736, 1.2674, 1.1128],
[    5.4204, 2.1735, 1.2269, 2.3073],
[    6.4202, 1.9002, 1.5936, 1.9646],
[    6.2915, 3.0353, 1.9891, 1.541],
[    6.4345, 4.1791, 1.78, 1.4908],
[    6.9053, 5.2034, 1.4379, 1.5863],
[    11.4604, 7.1964, 6.2556, 1.6455],
[    7.4845, 6.7723, 0.6539, 1.6442],
[    8.2186, 7.4398, 1.0519, 0.8659],
[    8.6266, 7.3873, 1.5899, 1.0211],
[    9.189, 7.3679, 1.6409, 1.468],
[    9.7595, 7.3558, 1.6991, 1.9021],
[    10.2971, 7.3511, 2.0703, 2.0571],
[    10.6406, 7.3537, 3.324, 1.4922],
[    11.2819, 7.3573, 3.0193, 2.2441],
[    11.7695, 7.3573, 3.5222, 2.3045],
[    12.2841, 7.3409, 4.0034, 2.3488],
[    12.8376, 7.292, 4.4438, 2.38],
[    13.338, 7.1676, 5.6158, 1.6735],
[    14.0743, 7.0318, 5.1652, 2.41],
[    15.2354, 6.7006, 4.3591, 2.9623],
[    16.0816, 6.3747, 3.7068, 3.683],
[    16.6723, 6.0701, 3.4313, 4.2779],
[    17.0006, 5.8196, 3.9731, 4.3543],
[    17.1789, 5.2358, 5.6377, 3.9851],
[    17.3555, 6.7286, 5.5493, 3.5375],
[    17.1784, 9.6435, 5.1399, 1.5292],
[    17.5663, 9.8184, 5.422, 2.6694],
[    17.776, 10.2946, 5.72629, 3.26588],
[    17.8765, 10.948, 5.41732, 3.65721],
[    17.6142, 12.0144, 4.04183, 3.53346],
[    3.7025, 17.2356, 12.8876, 3.7429],
[    19.1301, 11.0948, 4.64901, 2.71263],
[    19.2674, 12.9182, 4.86337, 1.56756],
[    19.2957, 14.3501, 4.73425, 1.28918],
[    19.3319, 15.5017, 5.29537, 0.605844],
[    19.2808, 16.6885, 4.8045, 1.0463],
[    19.2214, 17.6444, 4.461, 1.6029],
[    19.1624, 18.5596, 4.2948, 2.0396],
[    19.1889, 19.1005, 4.4585, 2.4663],
[    19.6418, 19.0455, 5.0371, 2.6827],
[    19.9644, 19.0138, 6.14487, 2.5239],
[    20.1472, 18.9949, 7.5138, 2.2735],
[    20.2933, 19.0298, 8.9767, 1.99],
[    20.3892, 19.1062, 10.662, 1.4953],
[    20.3361, 19.297, 10.888, 2.6959],
[    20.578, 19.599, 11.3727, 3.28719],
[    21.1671, 19.7695, 11.8513, 3.33049],
[    22.044, 19.6697, 12.3856, 2.82428],
[    22.6845, 19.6847, 12.774, 2.85137],
[    23.3405, 19.6095, 13.1235, 2.87516],
[    24.0042, 19.4258, 13.4396, 2.89604],
[    24.6274, 19.0886, 13.7603, 2.9227],
[    25.0709, 19.0798, 13.8518, 3.54545],
[    25.8976, 18.2185, 14.3167, 2.95354],
[    26.507, 17.6383, 14.5596, 2.96577],
[    26.9049, 17.294, 14.5583, 3.63837],
[    27.6563, 16.4285, 14.9779, 2.98233],
[    28.1819, 15.8851, 15.1542, 2.98706],
[    28.6641, 15.4345, 15.3087, 2.98963],
[    28.9476, 15.2208, 15.1, 3.71601],
[    29.144, 15.1726, 14.7586, 4.30013],
[    29.2024, 15.2293, 14.5135, 4.76492],
[    29.0818, 15.43, 14.4327, 5.11982],
[    28.7621, 15.7189, 14.5564, 5.44174],
[    28.1894, 16.155, 14.9305, 5.67589],
[    27.3049, 16.7296, 15.6115, 5.83377],
[    27.0059, 17.7639, 15.7131, 5.7837],
[    16.8819, 18.5913, 25.5582, 5.86],
[    20.6809, 19.0417, 21.6575, 5.9676],
[    27.5446, 19.1584, 15.538, 5.52593],
[    31.0617, 13.0637, 18.442, 5.9696],
[    33.3689, 12.951, 16.5877, 6.4692],
[    34.6726, 15.4733, 13.1138, 7.02588],
[    35.3163, 19.0211, 9.49887, 7.42518],
[    35.5631, 21.2816, 8.0037, 7.4433],
[    35.9299, 23.0547, 12.1439, 2.11253],
[    35.763, 22.9064, 12.4739, 3.21097],
[    35.6597, 23.1032, 12.5977, 4.08655],
[    35.5645, 23.4219, 12.7473, 4.80703],
[    35.8847, 23.2948, 14.1891, 4.17287],
[    36.0228, 23.4128, 14.9491, 4.188],
[    36.1874, 23.5964, 15.6402, 4.1855],
[    36.5254, 23.8083, 16.7707, 3.47947],
[    36.6706, 24.0992, 17.3415, 3.49331],
[    36.6488, 24.4096, 17.399, 4.21665],
[    36.7881, 24.7736, 17.8919, 4.23284],
[    36.9185, 25.1995, 18.3317, 4.24391],
[    0.0, 0.0, 0.0, 0.0],
[    0.0, 0.0, 0.0, 0.0],
[    0.0, 0.0, 0.0, 0.0],
[    0.0, 0.0, 0.0, 0.0],
[    0.0, 0.0, 0.0, 0.0],
[    0.0, 0.0, 0.0, 0.0],
[    0.0, 0.0, 0.0, 0.0],
[    0.0, 0.0, 0.0, 0.0],
[    0.0, 0.0, 0.0, 0.0],
[    0.0, 0.0, 0.0, 0.0],
[    0.0, 0.0, 0.0, 0.0],
[    0.0, 0.0, 0.0, 0.0],
[    0.0, 0.0, 0.0, 0.0],
[    0.0, 0.0, 0.0, 0.0],
[    0.0, 0.0, 0.0, 0.0],
[    0.0, 0.0, 0.0, 0.0],
[    0.0, 0.0, 0.0, 0.0],
[    0.0, 0.0, 0.0, 0.0],
[    0.0, 0.0, 0.0, 0.0],
[    0.0, 0.0, 0.0, 0.0]])

ASF_b = np.asarray([
[    0.0, 0.0, 0.0, 0.0],
[    20.6593, 7.74039, 49.5519, 2.20159],
[    9.1037, 3.3568, 22.9276, 0.9821],
[    3.9546, 1.0524, 85.3905, 68.261],
[    43.6427, 1.8623, 103.483, 0.542],
[    23.2185, 1.021, 60.3498, 0.1403],
[    20.8439, 10.2075, 0.5687, 51.6512],
[    0.0057, 9.8933, 28.9975, 0.5826],
[    13.2771, 5.7011, 0.3239, 32.9089],
[    10.2825, 4.2944, 0.2615, 26.1476],
[    8.4042, 3.4262, 0.2306, 21.7184],
[    3.285, 8.8422, 0.3136, 129.424],
[    2.8275, 79.2611, 0.3808, 7.1937],
[    3.0387, 0.7426, 31.5472, 85.0886],
[    2.4386, 32.3337, 0.6785, 81.6937],
[    1.9067, 27.157, 0.526, 68.1645],
[    1.4679, 22.2151, 0.2536, 56.172],
[    0.0104, 1.1662, 18.5194, 47.7784],
[    0.9072, 14.8407, 43.8983, 33.3929],
[    12.7949, 0.7748, 213.187, 41.6841],
[    10.4421, 0.6599, 85.7484, 178.437],
[    9.0213, 0.5729, 136.108, 51.3531],
[    7.8508, 0.5, 35.6338, 116.105],
[    6.8657, 0.4385, 26.8938, 102.478],
[    6.1038, 0.392, 20.2626, 98.7399],
[    5.3409, 0.3432, 17.8674, 83.7543],
[    4.7611, 0.3072, 15.3535, 76.8805],
[    4.2791, 0.2784, 13.5359, 71.1692],
[    3.8785, 0.2565, 12.1763, 66.3421],
[    3.5828, 0.247, 11.3966, 64.8126],
[    3.2655, 0.2333, 10.3163, 58.7097],
[    3.0669, 0.2412, 10.7805, 61.4135],
[    2.8509, 0.2516, 11.4468, 54.7625],
[    2.6345, 0.2647, 12.9479, 47.7972],
[    2.4098, 0.2726, 15.2372, 43.8163],
[    2.1723, 16.5796, 0.2609, 41.4328],
[    1.9384, 16.5623, 0.2261, 39.3972],
[    1.7888, 17.3151, 0.2748, 164.934],
[    1.5564, 14.0988, 0.1664, 132.376],
[    1.4029, 12.8006, 0.125599, 104.354],
[    1.27618, 11.916, 0.117622, 87.6627],
[    1.18865, 11.766, 0.204785, 69.7957],
[    0.2772, 1.0958, 11.004, 61.6584],
[    0.864132, 8.14487, 21.5707, 86.8472],
[    0.80852, 8.43467, 24.7997, 94.2928],
[    0.751536, 8.21758, 25.8749, 98.6062],
[    0.698655, 7.98929, 25.2052, 76.8986],
[    0.6446, 7.4726, 24.6605, 99.8156],
[    0.5946, 6.9089, 24.7008, 87.4825],
[    0.5476, 6.3776, 25.8499, 92.8029],
[    5.8303, 0.5031, 26.8909, 83.9571],
[    5.3034, 0.4607, 27.9074, 75.2825],
[    4.81742, 0.420885, 28.5284, 70.8403],
[    4.347, 0.3814, 27.766, 66.8776],
[    3.9282, 0.344, 26.4659, 64.2658],
[    3.569, 0.3107, 24.3879, 213.904],
[    3.216, 0.2756, 20.2073, 167.202],
[    2.94817, 0.244475, 18.7726, 133.124],
[    2.81219, 0.226836, 17.6083, 127.113],
[    2.77393, 0.222087, 16.7669, 143.644],
[    2.66248, 0.210628, 15.885, 137.903],
[    2.5627, 0.202088, 15.1009, 132.721],
[    2.47274, 0.196451, 14.3996, 128.007],
[    2.3879, 0.1942, 13.7546, 123.174],
[    2.25341, 0.181951, 12.9331, 101.398],
[    2.24256, 0.196143, 12.6648, 115.362],
[    2.1802, 0.202172, 12.1899, 111.874],
[    2.07051, 0.19794, 11.4407, 92.6566],
[    2.07356, 0.223545, 11.3604, 105.703],
[    2.02859, 0.238849, 10.9975, 102.961],
[    1.9889, 0.257119, 10.6647, 100.417],
[    1.90182, 9.98519, 0.261033, 84.3298],
[    1.83262, 9.5999, 0.275116, 72.029],
[    1.77333, 9.37046, 0.295977, 63.3644],
[    1.72029, 9.2259, 0.321703, 57.056],
[    1.67191, 9.09227, 0.3505, 52.0861],
[    1.62903, 8.97948, 0.382661, 48.1647],
[    1.59279, 8.86553, 0.417916, 45.0011],
[    1.51293, 8.81174, 0.424593, 38.6103],
[    0.4611, 8.6216, 1.4826, 36.3956],
[    0.545, 8.4484, 1.5729, 38.3246],
[    0.65515, 8.70751, 1.96347, 45.8149],
[    0.6902, 2.3576, 8.618, 47.2579],
[    0.704, 2.9238, 8.7937, 48.0093],
[    0.700999, 3.55078, 9.55642, 47.0045],
[    0.68587, 3.97458, 11.3824, 45.4715],
[    0.6631, 4.0691, 14.0422, 44.2473],
[    0.646453, 4.17619, 23.1052, 150.645],
[    0.616341, 3.87135, 19.9887, 142.325],
[    0.589092, 3.65155, 18.599, 117.02],
[    0.563359, 3.46204, 17.8309, 99.1722],
[    0.547751, 3.41519, 16.9235, 105.251],
[    0.5293, 3.3253, 16.0927, 100.613],
[    0.511929, 3.25396, 15.3622, 97.4908],
[    0.499384, 3.26371, 14.9455, 105.98],
[    0.483629, 3.20647, 14.3136, 102.273],
[    0.465154, 3.08997, 13.4346, 88.4834],
[    0.451018, 3.04619, 12.8946, 86.003],
[    0.437533, 3.00775, 12.4044, 83.7881],
[    0.0, 0.0, 0.0, 0.0],
[    0.0, 0.0, 0.0, 0.0],
[    0.0, 0.0, 0.0, 0.0],
[    0.0, 0.0, 0.0, 0.0],
[    0.0, 0.0, 0.0, 0.0],
[    0.0, 0.0, 0.0, 0.0],
[    0.0, 0.0, 0.0, 0.0],
[    0.0, 0.0, 0.0, 0.0],
[    0.0, 0.0, 0.0, 0.0],
[    0.0, 0.0, 0.0, 0.0],
[    0.0, 0.0, 0.0, 0.0],
[    0.0, 0.0, 0.0, 0.0],
[    0.0, 0.0, 0.0, 0.0],
[    0.0, 0.0, 0.0, 0.0],
[    0.0, 0.0, 0.0, 0.0],
[    0.0, 0.0, 0.0, 0.0],
[    0.0, 0.0, 0.0, 0.0],
[    0.0, 0.0, 0.0, 0.0],
[    0.0, 0.0, 0.0, 0.0],
[    0.0, 0.0, 0.0, 0.0]])

last_params = {}

from ase.utils.xrdebye import wavelengths

def analysis(atoms=None, twotheta_range=[1.0, 180.0], twotheta_n=None, wavelength=wavelengths['CuKa1'], do_Lorentz=False, header=False):
    """do XRD analysis on one atomic config
    Parameters
    ----------

    atoms: ase.atoms.Atoms
        atomic configuration

    twotheta_range: [float, float], default [0.0, 180.0]
        min and max angles, in degrees

    twotheta_n: int, default 1+(max-min)*4
        number of theta values in two-theta range

    wavelength: float or str, default wavelengths['CuKa1']
        wavelength of x-rays, string is key in ase.utils.debye.wavelengths, positive float is
        wavelength (inv. A), and negative is multiple of CuKa1

    header: bool, default False
        if true, return header labels for each of the returned rows of results

    Returns
    -------
    analysis results: ndarray, type float, shape (2, twotheta_n) with two-theta values and intensities

    """
    global last_params

    if header:
        return ("$2\\theta$ (deg.)", "intensity (arb units.)")
    assert atoms is not None

    if twotheta_n is None:
        # default 0.25 deg interval
        twotheta_n = 1 + int((twotheta_range[1] - twotheta_range[0])/0.25)

    thetas = np.linspace(twotheta_range[0], twotheta_range[1], twotheta_n)

    # row vectors of basis for grid in k-space
    k_grid = atoms.cell.reciprocal()

    def rad(deg):
        return deg * np.pi / 180.0

    if isinstance(wavelength, str):
        wavelength = wavelengths[wavelength]
    elif wavelength < 0:
        wavelength *= -wavelengths['CuKa1']

    k_sq_range = np.array((2.0*np.sin(rad(twotheta_range[0]) / 2.0) / wavelength, 2.0*np.sin(rad(twotheta_range[1]) / 2.0) / wavelength))
    k_sq_range *= k_sq_range

    ks = []
    k_norms_sq = []
    n_shell_used = 1
    k_max = 1
    while n_shell_used > 0:
        k_i_shell = ([(k_max, i1, i2) for i1 in range(-k_max, k_max+1) for i2 in range(-k_max, k_max+1)] +
                     [(-k_max, i1, i2) for i1 in range(-k_max, k_max+1) for i2 in range(-k_max, k_max+1)] +
                     [(i0, k_max, i2) for i0 in range(-k_max+1, k_max) for i2 in range(-k_max, k_max+1)] +
                     [(i0, -k_max, i2) for i0 in range(-k_max+1, k_max) for i2 in range(-k_max, k_max+1)] +
                     [(i0, i1, k_max) for i0 in range(-k_max+1, k_max) for i1 in range(-k_max+1, k_max)] +
                     [(i0, i1, -k_max) for i0 in range(-k_max+1, k_max) for i1 in range(-k_max+1, k_max)])

        k_shell = np.asarray(k_i_shell @ k_grid)
        k_shell_norm_sq = np.sum(k_shell * k_shell, axis=1)
        k_inds = np.where(np.logical_and(k_shell_norm_sq >= k_sq_range[0], k_shell_norm_sq <= k_sq_range[1]))[0]
        n_shell_used = len(k_inds)
        ks.extend(k_shell[k_inds].tolist())
        k_norms_sq.extend(k_shell_norm_sq[k_inds].tolist())

        k_max += 1

    if len(ks) == 0:
        return np.stack([thetas, np.zeros((len(thetas)))])

    ks = np.asarray(ks)
    k_norms = np.sqrt(k_norms_sq)
    theta = np.arcsin(k_norms * wavelength / 2.0)
    sin_sq_theta_over_lambda_sq = (k_norms / 2.0 ) ** 2
    theta_i_of_k = np.floor(twotheta_n * (2.0 * theta - rad(twotheta_range[0])) / rad(twotheta_range[1] - twotheta_range[0])).astype(int)

    k_dot_r = ks @ atoms.positions.T
    two_pi_i = 2.0j * np.pi
    exp_2_pi_i_k_dot_r = np.exp(two_pi_i * k_dot_r).T

    for Z in set(atoms.numbers):
        ASF = atomic_structure_factor(Z, sin_sq_theta_over_lambda_sq)
        exp_2_pi_i_k_dot_r[np.where(atoms.numbers == Z)[0], :] *= ASF

    F_k = np.sum(exp_2_pi_i_k_dot_r, axis=0)
    if do_Lorentz:
        F_k *= (1.0 + np.cos(2.0 * theta) ** 2) / (cos(theta) * (sin(theta)) ** 2 )

    xrd = np.zeros(twotheta_n)
    np.add.at(xrd, theta_i_of_k, np.abs(F_k)**2)
    xrd /= len(atoms)

    return np.asarray([thetas, xrd])


def atomic_structure_factor(Z, sin_sq_theta_over_lambda_sq):
    ASF = ASF_c[Z]
    for i in range(4):
        ASF += ASF_a[Z, i] * np.exp(-ASF_b[Z, i] * sin_sq_theta_over_lambda_sq)
    return ASF
