#!/usr/bin/env python3

def document_toml(d, depth, special_subsections=[]):
    prefix = "    " * depth
    for k, v in d.items():
        if k in special_subsections:
            print(prefix + f"- [{k}] - see below")
            continue

        if isinstance(v, dict):
            print(prefix + f"- [{k}]")
            if "_IGNORE_" in v:
                print(prefix + "-    variable content")
            else:
                document_toml(v, depth + 1, special_subsections=[s.replace(k + "/", "") for s in special_subsections])
        else:
            try:
                l_v = len(v)
            except TypeError:
                l_v = 0

            if l_v == 2 and v[0] == "_REQ_":
                print(prefix + f"- {k} = required {type(v[1])}")
            else:
                if isinstance(v, str) and len(v) == 0:
                    v = '""'
                print(prefix + f"- {k} = {v}")

    if depth == 0:
        print("")

print("# comprehensive list of parameters in toml config file, with default values")
print("")

from pymatnext import sample_params
document_toml(sample_params.param_defaults, depth=0, special_subsections=['ns', 'configs'])

from pymatnext import ns_params
document_toml({'ns': ns_params.param_defaults}, depth=0, special_subsections=['ns/exit_conditions'])

from pymatnext.loop_exit import loop_exit_params
document_toml({'ns.exit_conditions': loop_exit_params.param_defaults}, depth=0)

from pymatnext.ns_configs.ase_atoms import ase_atoms_params
document_toml({'configs': ase_atoms_params.param_defaults_ase_atoms}, depth=0, special_subsections=['configs/walk'])
document_toml({'walk': ase_atoms_params.param_defaults_walk}, depth=0)
